=================================
README for gpulib IDL Package
=================================

Overview
========

The gpulib IDL package is a part of Tech-X Corporations GPULib library.  This 
library provides array operations that are accelerated using NVIDIA's CUDA 
technologies if appropriate hardware is installed.

The IDL bindings fo the library are designed to enable developers to write
software that executes both on systems with a CUDA enabled GPU or without.

Developers have to be aware of the different memories used by the CPU and
the GPU. Data has to be explicitly transferred to and from the GPU memory, 
which can be a time consuming operation. The IDL bindings for the GPUlib 
can hide these explicit data transfer calls for convenience, but one should 
be aware that this can severely impact the overall performance.

For installation instructions, see the INSTALL file in this directory.

For a detailed reference manual, see docs/gpuinit.html 


Initialization
==============

GPUlib is initialized by a call to gpuinit. It detects whether a GPU or a
GPU emulator is available. If none is available, all the GPU operations will
be emulated in IDL. The detected result can be overridden by specifying 
keyword parameters.


Data transfer
=============
Users can explicitly transfer data between GPU and host memory by using
gpuPutArr and gpuGetArr. GPU variables can either be allocated explicitly
or they are allocated on the fly during transfer. E.g. if x_gpu is undefined
and the user issues a 

gpuPutArr, findgen(100), x_gpu

a correctly sized x_gpu variable will be allocated and will be available for 
later use. It is the user's responsibility to clean up the allocated space
via gpuFree, x_gpu.


Vector Operations
=================
In order to get significant speedup using the GPUlib, one should perform 
multiple operations on long vectors and only rarely transfer data between
the GPU and CPU. 

Vector operations on the GPU are of the form

gpuAdd, x_gpu, y_gpu, result_gpu

which adds the elements of the vector under X and Y and stores in the result.
The above form assumes that all variables are already on the GPU. 

If result_gpu is an undefined variable at the time of the call, it will be 
allocated on the GPU and the handle will be returned in result_gpu.

If x_gpu or y_gpu are not gpu varialbes, then they will be transferred to 
a temporary variable on the GPU. 

Example:

gpuAdd, findgen(10), findgen(10)+5, result_gpu

will compute the sum of findgen(10) and findgen(10)+5 on the GPU and store
the result in the result_gpu variable.



Array subscripting
==================

gpulib provides mechanisms to subscript vectors and arrays on the GPU via
the gpuSubArr procedure. Depending on the dimensionality of the
object, it either takes one or indices, which can either be scalars 
or 2 element arrays representing the lower and upper bound of a segment.
An index or upper bound of -1 corresponds to IDL's '*'

E.g. the following operation

gpuSubArr, a, [3, 5], -1, b, -1, [3, 5]

is equivalent to 

b[*, 3:5] = a[3:5, *]

(assuming that the first dimension of b has the same number of elements
as the second dimension of a)

More information
================

For more information about the GPULib IDL interface, see 

docs/gpuinit.html

or contact support@txcorp.com


